/**
 * @fileoverview BaseReportService - Template base para servicios de reportes
 * Proporciona operaciones comunes de generaci√≥n de reportes con puntos de personalizaci√≥n
 */

import { ConfiguracionReporte, ColumnaReporte } from "./reportes.service";

/**
 * Configuraci√≥n base para un servicio de reportes
 */
export interface BaseReportServiceConfig {
  tipoReporte: string;
  tituloBase: string;
  descripcionBase: string;
}

/**
 * BaseReportService gen√©rico para generaci√≥n de reportes
 */
export abstract class BaseReportService<FilterInput> {
  protected abstract config: BaseReportServiceConfig;

  /**
   * M√©todo abstracto para configurar columnas espec√≠ficas del reporte
   */
  protected abstract configurarColumnas(
    filters?: FilterInput
  ): ColumnaReporte[];

  /**
   * M√©todo abstracto para generar t√≠tulo din√°mico
   */
  protected abstract generarTitulo(
    filters?: FilterInput,
    datos?: any[]
  ): string;

  /**
   * M√©todo abstracto para generar descripci√≥n din√°mica
   */
  protected abstract generarDescripcion(
    filters?: FilterInput,
    datos?: any[]
  ): string;

  /**
   * M√©todo para generar metadatos espec√≠ficos del reporte
   */
  protected generarMetadatos(
    filters?: FilterInput,
    datos?: any[]
  ): Record<string, any> {
    return {
      filtros: filters || {},
      tipoReporte: this.config.tipoReporte,
      totalRegistros: datos?.length || 0,
      fechaGeneracion: new Date().toISOString(),
      generadoPor: "Sistema de Reportes",
    };
  }

  /**
   * üìä Generar configuraci√≥n completa del reporte
   */
  protected generarConfiguracion(
    filters?: FilterInput,
    datos?: any[]
  ): ConfiguracionReporte {
    return {
      titulo: this.generarTitulo(filters, datos),
      descripcion: this.generarDescripcion(filters, datos),
      columnas: this.configurarColumnas(filters),
      metadatos: this.generarMetadatos(filters, datos),
    };
  }

  /**
   * üéØ M√©todo principal para generar reporte (implementado por servicios espec√≠ficos)
   */
  abstract generarReporte(datos: any[], filters?: FilterInput): Promise<Buffer>;
}

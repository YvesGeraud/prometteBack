/**
 * @fileoverview Rutas de Autenticaci√≥n
 *
 * Define todos los endpoints para el sistema de autenticaci√≥n:
 *
 * P√öBLICAS (sin autenticaci√≥n):
 * - POST /login - Iniciar sesi√≥n
 * - POST /refresh - Renovar token
 *
 * PROTEGIDAS (requieren autenticaci√≥n):
 * - POST /logout - Cerrar sesi√≥n
 * - GET /me - Informaci√≥n del usuario actual
 * - GET /verify - Verificar token
 * - GET /sessions - Listar sesiones activas
 * - DELETE /sessions/:sessionId - Cerrar sesi√≥n espec√≠fica
 */

import { Router } from "express";
import authController from "../controllers/auth.controller";
import { validarRequest } from "../middleware/validacion";
import { verificarAutenticacion } from "../middleware/authMiddleware";
import {
  rateLimitLogin,
  rateLimitRefresh,
} from "../middleware/authRateLimiter";
import {
  esquemaLogin,
  esquemaRefreshToken,
  esquemaLogout,
} from "../schemas/auth.schemas";

const router = Router();

// ===== RUTAS P√öBLICAS (NO REQUIEREN AUTENTICACI√ìN) =====

/**
 * üîê LOGIN DE USUARIO
 * POST /api/auth/login
 *
 * Autentica un usuario y devuelve tokens JWT + refresh token
 * Incluye rate limiting estricto (5 intentos por 15 minutos)
 */
router.post(
  "/login",
  rateLimitLogin, // Rate limiting espec√≠fico para login
  validarRequest({ body: esquemaLogin }),
  authController.login.bind(authController)
);

/**
 * üîÑ REFRESH TOKEN
 * POST /api/auth/refresh
 *
 * Renueva el access token usando un refresh token v√°lido
 * Incluye rate limiting m√°s permisivo (10 intentos por 5 minutos)
 */
router.post(
  "/refresh",
  rateLimitRefresh, // Rate limiting para refresh
  validarRequest({ body: esquemaRefreshToken }),
  authController.refreshToken.bind(authController)
);

// ===== RUTAS PROTEGIDAS (REQUIEREN AUTENTICACI√ìN) =====

/**
 * üö™ LOGOUT DE USUARIO
 * POST /api/auth/logout
 *
 * Cierra sesi√≥n(es) del usuario y revoca refresh tokens
 * Puede cerrar una sesi√≥n espec√≠fica o todas las sesiones
 */
router.post(
  "/logout",
  verificarAutenticacion, // Requiere token v√°lido
  validarRequest({ body: esquemaLogout }),
  authController.logout.bind(authController) as any
);

/**
 * üë§ OBTENER USUARIO ACTUAL
 * GET /api/auth/me
 *
 * Retorna informaci√≥n del usuario autenticado y estad√≠sticas de sesi√≥n
 */
router.get(
  "/me",
  verificarAutenticacion,
  authController.obtenerUsuarioActual.bind(authController) as any
);

/**
 * ‚úÖ VERIFICAR TOKEN
 * GET /api/auth/verify
 *
 * Verifica si el token actual es v√°lido y retorna informaci√≥n b√°sica
 * √ötil para verificar estado de autenticaci√≥n desde el frontend
 */
router.get(
  "/verify",
  verificarAutenticacion,
  authController.verificarToken.bind(authController) as any
);

/**
 * üìä OBTENER SESIONES ACTIVAS
 * GET /api/auth/sessions
 *
 * Lista todas las sesiones activas del usuario actual
 * √ötil para mostrar dispositivos conectados
 */
router.get(
  "/sessions",
  verificarAutenticacion,
  authController.obtenerSesionesActivas.bind(authController) as any
);

/**
 * üóëÔ∏è CERRAR SESI√ìN ESPEC√çFICA
 * DELETE /api/auth/sessions/:sessionId
 *
 * Cierra una sesi√≥n espec√≠fica por su ID
 * √ötil para "logout remoto" desde panel de sesiones activas
 */
router.delete(
  "/sessions/:sessionId",
  verificarAutenticacion,
  // TODO: Agregar validaci√≥n de UUID para sessionId
  authController.cerrarSesionEspecifica.bind(authController) as any
);

export default router;
